{"version":3,"sources":["configFirebase.js","components/UploadFiles/index.jsx","components/AudioItems/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","database","Uploadfiles","props","useState","fileAudio","setfileAudio","fileImage","setfileImage","urlAudio","setUrlAudio","urlImage","setUrlImage","progessAudio","setProgessAudio","progessImage","setProgessImage","artistName","setAristName","audioName","setAudioName","toggleFormUpload","handleUploadSong","handleToggleFormUpload","handleChangeFiles","e","target","name","files","handleChangeText","value","className","onClick","Provider","size","type","accept","onChange","ref","put","on","snapshot","progressBarAudio","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","color","style","height","role","aria-valuemin","aria-valuemax","width","progressBarImage","Backgroundcolor","backgroundColor","placeholder","databaseRef","push","src","image","artist","success","default","AudioItems","data","handleSaveIndex","active","map","song","index","id","alt","App","audioRef","useRef","playAndPauseAudio","setplayAndPauseAudio","currentTime","setCurrentTime","duration","setDuration","setIndex","activeID","setActiveID","toggleListAudio","setToggleListAudio","widthInput","setWidthInput","setToggleFormUpload","title","audios","setAudios","useEffect","widthScreen","window","screen","a","once","res","keys","Object","val","values","key","err","fetchData","onToggleListAudio","onToggleFormUpload","bool","nextSong","lengthAudio","length","current","play","UploadFiles","newAudios","onLoadedData","onTimeUpdate","onEnded","cMinute","floor","cSecond","dMinute","dSecond","cTime","dTime","renderTime","pause","axis","xmin","x","xmax","styles","track","thumb","borderRadius","array","result","forEach","ob","findIndex","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e26d461.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst fire = {\r\n    apiKey: \"AIzaSyCGVBrQL0JASeREFYX0PHFbsgHo70YBZr0\",\r\n    authDomain: \"music-app-8aad0.firebaseapp.com\",\r\n    databaseURL: \"https://music-app-8aad0.firebaseio.com\",\r\n    projectId: \"music-app-8aad0\",\r\n    storageBucket: \"music-app-8aad0.appspot.com\",\r\n    messagingSenderId: \"555655083886\",\r\n    appId: \"1:555655083886:web:1a2323f561d76f292c737f\",\r\n    measurementId: \"G-N9HWNZERJ1\"\r\n};\r\nfirebase.initializeApp(fire);\r\nconst storage = firebase.storage();\r\nconst database = firebase.database();\r\n\r\nexport { storage, database, fire as default };\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { storage, database } from '../../configFirebase';\r\nimport { FaCloudUploadAlt } from 'react-icons/fa';\r\nimport {\r\n    AiFillCloseCircle,\r\n} from 'react-icons/ai';\r\nimport './style.css';\r\nimport { toast } from 'react-toastify';\r\nimport { IconContext } from 'react-icons/lib';\r\n\r\nUploadfiles.propTypes = {\r\n    toggleFormUpload: PropTypes.bool,\r\n    handleUploadSong: PropTypes.func,\r\n    handleToggleFormUpload: PropTypes.func,\r\n}\r\nUploadfiles.default = {\r\n    toggleFormUpload: false,\r\n    handleUploadSong: null,\r\n    handleToggleFormUpload: null\r\n}\r\n\r\nfunction Uploadfiles(props) {\r\n    const [fileAudio, setfileAudio] = useState(null);\r\n    const [fileImage, setfileImage] = useState(null);\r\n    const [urlAudio, setUrlAudio] = useState(null);\r\n    const [urlImage, setUrlImage] = useState(null);\r\n    const [progessAudio, setProgessAudio] = useState(null);\r\n    const [progessImage, setProgessImage] = useState(null);\r\n    const [artistName, setAristName] = useState('');\r\n    const [audioName, setAudioName] = useState('');\r\n    const { toggleFormUpload, handleUploadSong, handleToggleFormUpload } = props;\r\n    const handleChangeFiles = (e) => {\r\n        if (e.target.name === \"fileAudio\") {\r\n            setfileAudio(e.target.files[0])\r\n        }\r\n        if (e.target.name === \"fileImage\") {\r\n            setfileImage(e.target.files[0])\r\n        }\r\n    }\r\n    const handleChangeText = (e) => {\r\n        if (e.target.name === 'audioName') {\r\n            setAudioName(e.target.value);\r\n        } else {\r\n            setAristName(e.target.value);\r\n        }\r\n    }\r\n    const handleSaveAudio = () => {\r\n        if (fileAudio) {\r\n            const uploadTask = storage.ref(`Audios/${fileAudio.name}`).put(fileAudio);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                (snapshot) => {\r\n                    const progressBarAudio = Math.round(\r\n                        (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                    );\r\n                    setProgessAudio(progressBarAudio);\r\n                },\r\n                error => {\r\n                    console.log('err', error);\r\n                },\r\n                () => {\r\n                    storage\r\n                        .ref(`Audios`)\r\n                        .child(fileAudio.name)\r\n                        .getDownloadURL()\r\n                        .then(urlAudio => {\r\n                            setUrlAudio(urlAudio);\r\n                        })\r\n                }\r\n            )\r\n        }\r\n        else {\r\n            toast('Chọn file bạn muốn up!', {\r\n                position: \"top-left\",\r\n                autoClose: 4000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n            })\r\n        }\r\n    }\r\n    const handleSaveImage = () => {\r\n        if (fileImage) {\r\n            const uploadTask = storage.ref(`Images/${fileImage.name}`).put(fileImage);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                (snapshot) => {\r\n                    const progressBarImage = Math.round(\r\n                        (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                    );\r\n                    setProgessImage(progressBarImage);\r\n                },\r\n                error => {\r\n                    console.log('err', error);\r\n                },\r\n                () => {\r\n                    storage\r\n                        .ref(`Images`)\r\n                        .child(fileImage.name)\r\n                        .getDownloadURL()\r\n                        .then(urlImage => {\r\n                            setUrlImage(urlImage);\r\n                        })\r\n                }\r\n            )\r\n        }\r\n        else {\r\n            toast('Chọn file bạn muốn up!', {\r\n                position: \"top-left\",\r\n                autoClose: 4000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n            })\r\n        }\r\n    }\r\n    const onUploadDatabase = () => {\r\n        const databaseRef = database.ref('Audios');\r\n        if (fileAudio && fileImage) {\r\n            if (urlAudio && urlImage) {\r\n                if (audioName && artistName) {\r\n                    databaseRef.push({\r\n                        src: urlAudio,\r\n                        image: urlImage,\r\n                        name: audioName,\r\n                        artist: artistName\r\n                    })\r\n                    handleUploadSong({\r\n                        src: urlAudio,\r\n                        image: urlImage,\r\n                        name: audioName,\r\n                        artist: artistName\r\n                    })\r\n                    toast.success('Upload bài hát thành công!', {\r\n                        position: \"top-left\",\r\n                        autoClose: 4000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined\r\n                    })\r\n                    handleToggleFormUpload(false);\r\n                    // reset value\r\n                    setAristName('')\r\n                    setAudioName('')\r\n                    setProgessAudio(0)\r\n                    setProgessImage(0)\r\n                }\r\n                else {\r\n                    toast('Vui lòng nhập thông tin bài hát!', {\r\n                        position: \"top-left\",\r\n                        autoClose: 4000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                toast('Tải file đã(hoặc chờ tải file)!', {\r\n                    position: \"top-left\",\r\n                    autoClose: 4000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                })\r\n            }\r\n        } else {\r\n            toast('Vui lòng up file!', {\r\n                position: \"top-left\",\r\n                autoClose: 4000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            }\r\n            );\r\n        }\r\n    }\r\n    const onToggleFormUpload = () => {\r\n        handleToggleFormUpload(false);\r\n    }\r\n    return (\r\n        <div className={`form-upload ${toggleFormUpload ? 'open' : ''}`}>\r\n            <div onClick={onToggleFormUpload}>\r\n                <IconContext.Provider value={{ className: \"files-close\", size: 30 }}>\r\n                    <AiFillCloseCircle />\r\n                </IconContext.Provider>\r\n            </div>\r\n            <p className=\"files-title\">Upload Files</p>\r\n            <div className=\"files-audio\">\r\n                <span className=\"files-name\">Audio</span>\r\n                <input\r\n                    type=\"file\"\r\n                    name=\"fileAudio\"\r\n                    accept=\".mp3\"\r\n                    className=\"files-input\"\r\n                    onChange={handleChangeFiles} />\r\n                <button\r\n                    className=\"files-button\"\r\n                    onClick={handleSaveAudio}\r\n                >\r\n                    <IconContext.Provider value={{ size: 20, color: '#ffffff' }}>\r\n                        <FaCloudUploadAlt />\r\n                    </IconContext.Provider>\r\n                </button>\r\n                <div className=\"progress\" style={{ height: '8px', }}>\r\n                    <div\r\n                        className=\"progress-bar progress-bar-striped \"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: `${progessAudio}%` }}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"files-image\">\r\n                <span className=\"files-name\">Image</span>\r\n                <input\r\n                    accept=\".jpg\"\r\n                    type=\"file\"\r\n                    name=\"fileImage\"\r\n                    className=\"files-input\"\r\n                    onChange={handleChangeFiles} />\r\n                <button\r\n                    className=\"files-button\"\r\n                    onClick={handleSaveImage}\r\n                >\r\n                    <IconContext.Provider value={{ size: 20, color: '#ffffff' }}>\r\n                        <FaCloudUploadAlt />\r\n                    </IconContext.Provider>\r\n                </button>\r\n                <div className=\"progress\" style={{ height: '8px', Backgroundcolor: '#56184d' }}>\r\n                    <div\r\n                        style={{ backgroundColor: '#56184d' }}\r\n                        className=\"progress-bar progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: `${progessImage}%` }}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"wrapper-upload\">\r\n                <input\r\n                    placeholder=\"Artist Name\"\r\n                    name=\"artistName\"\r\n                    className=\"files-text\"\r\n                    value={artistName}\r\n                    onChange={handleChangeText}\r\n                    type=\"text\" />\r\n                <input\r\n                    placeholder=\"Audio Name\"\r\n                    onChange={handleChangeText}\r\n                    name=\"audioName\"\r\n                    value={audioName}\r\n                    className=\"files-text\"\r\n                    type=\"text\" />\r\n                <button\r\n                    className=\"files-button__upload\"\r\n                    onClick={onUploadDatabase}\r\n                >Lưu lại\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Uploadfiles;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css'\r\nAudioItems.propTypes = {\r\n    data: PropTypes.array,\r\n    handleSaveIndex: PropTypes.func,\r\n    active: PropTypes.number,\r\n};\r\nAudioItems.default = {\r\n    data: [],\r\n    handleSaveIndex: null,\r\n    active: 0\r\n}\r\n\r\nfunction AudioItems(props) {\r\n    const { data, handleSaveIndex, active } = props;\r\n    const handleIndex = (id) => {\r\n        if (handleSaveIndex) {\r\n            handleSaveIndex(id);\r\n        }\r\n    }\r\n    return (\r\n        <ul className=\"song-list\">\r\n            {data.map((song, index) => {\r\n                return <li key={song.id} className={`song ${index === active ? 'active' : ''}`} onClick={() => handleIndex(song.id)}>\r\n                    <img className=\"song-img\" src={song.image} alt={song.name} />\r\n                    <div>\r\n                        <span className=\"song-name-artist\">{`${song.name} - ${song.artist}`}</span>\r\n                    </div>\r\n                </li>;\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default AudioItems;","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport UploadFiles from './components/UploadFiles';\nimport AudioItems from './components/AudioItems';\nimport TimeSlider from 'react-input-slider';\nimport { database } from './configFirebase';\nimport {\n    FaFacebookSquare\n} from 'react-icons/fa';\nimport {\n    AiOutlinePauseCircle,\n    AiOutlinePlayCircle,\n    AiOutlineCloseCircle\n} from 'react-icons/ai';\nimport {\n    BiSkipNextCircle,\n    BiSkipPreviousCircle\n} from 'react-icons/bi';\nimport { CgMenuGridR } from 'react-icons/cg';\nimport { IconContext } from 'react-icons/lib';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nconst databaseRef = database.ref('Audios');\n\nconst findIndex = (id, array) => {\n    let result = -1;\n    array.forEach((ob, index) => {\n        if (ob.id === id) {\n            result = index;\n        }\n    });\n    return result;\n}\n\nfunction App() {\n    const audioRef = useRef();\n    const [playAndPauseAudio, setplayAndPauseAudio] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [duration, setDuration] = useState(0);\n    const [index, setIndex] = useState(0);\n    const [activeID, setActiveID] = useState(0);\n    const [toggleListAudio, setToggleListAudio] = useState(true);\n    const [widthInput, setWidthInput] = useState(0);\n    const [toggleFormUpload, setToggleFormUpload] = useState(false);\n    const [audios, setAudios] = useState([\n        {\n            src: '',\n            image: 'https://e1.pngegg.com/pngimages/893/102/png-clipart-iconlab-itunes-itunes-sunset-red-and-yellow-musical-note.png',\n            title: 'Vui lòng chờ...',\n            artist: 'Vui lòng chờ tải dữ liệu...',\n            id: 0\n        }\n    ])\n    useEffect(() => {\n        const widthScreen = window.screen.width;\n        setWidthInput(widthScreen);\n        async function fetchData() {\n            try {\n                databaseRef.once('value').then(res => {\n                    const data = [];\n                    const keys = Object.keys(res.val());\n                    const values = Object.values(res.val());\n                    keys.map((key, index) => {\n                        values[index].id = key;\n                        data.push(values[index]);\n                        return data;\n                    })\n                    setAudios(data);\n                })\n            }\n            catch (err) {\n                console.log(err);\n            }\n        };\n        fetchData();\n    }, [])\n    const handleOnChangeSlider = ({ x }) => {\n        audioRef.current.currentTime = x;\n        setCurrentTime(x);\n        if (!playAndPauseAudio) {\n            setplayAndPauseAudio(true);\n            audioRef.current.play();\n        }\n    }\n    const onClickAudio = () => {\n        if (!playAndPauseAudio) {\n            audioRef.current.play();\n        }\n        else {\n            audioRef.current.pause();\n        }\n        setplayAndPauseAudio(!playAndPauseAudio);\n    }\n    const handleOnLoadedData = () => {\n        setDuration(audioRef.current.duration);\n        if (playAndPauseAudio) {\n            audioRef.current.play();\n        }\n    }\n    const renderTime = () => {\n        let html = null;\n        let cMinute = Math.floor(currentTime / 60);\n        let cSecond = Math.floor(currentTime % 60);\n        let dMinute = Math.floor(duration / 60);\n        let dSecond = Math.floor(duration % 60);\n        let cTime = `${cMinute} : ${cSecond < 10 ? `0${cSecond}` : `${cSecond}`}`;\n        let dTime = `${dMinute} : ${dSecond < 10 ? `0${dSecond}` : `${dSecond}`}`;\n        html = `${cTime} / ${dTime}`;\n        return html;\n    }\n    const selectIndex = (id) => {\n        let index = findIndex(id, audios);\n        if (index !== -1) {\n            setIndex(index);\n            setActiveID(index);\n        }\n    }\n    const onToggleListAudio = () => {\n        setToggleListAudio(!toggleListAudio);\n    }\n    const onToggleFormUpload = (bool) => {\n        setToggleFormUpload(bool);\n    }\n    const handleUploadSong = (song) => {\n        const newAudios = [...audios];\n        newAudios.push(song);\n        setAudios(newAudios);\n    }\n    const nextSong = () => {\n        let lengthAudio = audios.length;\n        if (index >= lengthAudio - 1) {\n            setIndex(0);\n            setActiveID(0)\n        } else {\n            setIndex(index + 1);\n            setActiveID(index + 1);\n        }\n        if (playAndPauseAudio) {\n            audioRef.current.play();\n            setplayAndPauseAudio(true);\n        }\n    }\n    const preSong = () => {\n        let lengthAudio = audios.length;\n        if (index <= 0) {\n            setIndex(lengthAudio - 1);\n            setActiveID(lengthAudio - 1);\n        } else {\n            setIndex(index - 1);\n            setActiveID(index - 1);\n        }\n        if (playAndPauseAudio) {\n            audioRef.current.play();\n            setplayAndPauseAudio(true);\n        }\n    }\n    return (\n        <div className=\"container-w\">\n            <UploadFiles\n                toggleFormUpload={toggleFormUpload}\n                handleToggleFormUpload={onToggleFormUpload}\n                handleUploadSong={handleUploadSong}\n            />\n            <div>\n                {!toggleListAudio ? <div onClick={onToggleListAudio}>\n                    <IconContext.Provider value={{ size: 40, color: 'white', className: 'icon-open active' }}>\n                        <CgMenuGridR />\n                    </IconContext.Provider>\n                </div> : ''}\n                <div className=\"wrapper-audio\">\n                    <img className={`audio-img ${playAndPauseAudio ? 'active' : ''}`} src={audios[index].image} alt={audios[0].name} />\n                    <p className=\"audio-name\">{audios[index].name}</p>\n                    <p className=\"audio-artist\">{audios[index].artist}</p>\n                    <audio\n                        ref={audioRef}\n                        src={audios[index].src}\n                        onLoadedData={handleOnLoadedData}\n                        onTimeUpdate={() => {\n                            setCurrentTime(audioRef.current.currentTime)\n                        }}\n                        onEnded={() => {\n                            nextSong()\n                        }}\n                    ></audio>\n                    <p className=\"audio-time\">\n                        {renderTime()}\n                    </p>\n                    <div className=\"audio-controls\">\n                        <button className=\"audio-button\" onClick={preSong}>\n                            <IconContext.Provider value={{ size: 40 }}>\n                                <BiSkipPreviousCircle />\n                            </IconContext.Provider>\n                        </button>\n                        <button className=\"audio-button\" onClick={onClickAudio}>\n                            <IconContext.Provider value={{ size: 40 }}>\n                                {playAndPauseAudio ? <AiOutlinePauseCircle /> : <AiOutlinePlayCircle />}\n                            </IconContext.Provider>\n                        </button>\n                        <button className=\"audio-button\" onClick={nextSong}>\n                            <IconContext.Provider value={{ size: 40 }}>\n                                <BiSkipNextCircle />\n                            </IconContext.Provider>\n                        </button>\n                    </div>\n                    <TimeSlider\n                        axis=\"x\"\n                        xmin={0}\n                        x={currentTime}\n                        xmax={duration}\n                        onChange={handleOnChangeSlider}\n                        styles={{\n                            track: {\n                                backgroundColor: \"#e3e3e3\",\n                                height: \"8px\",\n                                width: `${widthInput - widthInput * 50 / 100}px`\n                            },\n                            active: {\n                                backgroundColor: \"black\",\n                                height: \"8px\",\n                            },\n                            thumb: {\n                                width: \"20px\",\n                                height: \"20px\",\n                                backgroundColor: \"#e183e3\",\n                                borderRadius: '50px',\n                            },\n                        }}\n                    />\n                </div>\n                <div className={`wrapper-song ${toggleListAudio ? 'active' : ''}`}>\n                    <div onClick={onToggleListAudio}>\n                        <IconContext.Provider value={{ size: 40, color: \"white\", className: \"icon-close\" }}>\n                            <AiOutlineCloseCircle />\n                        </IconContext.Provider>\n                    </div>\n                    <p className=\"title-song\">List Audio</p>\n                    <AudioItems\n                        active={activeID}\n                        data={audios}\n                        handleSaveIndex={selectIndex}\n                    />\n                    <button\n                        onClick={() => onToggleFormUpload(true)}\n                        className=\"btn-upload\">Upload Song</button>\n                    <a href=\"https://www.facebook.com/profile.php?id=100010467708316\" className=\"messenger\">Báo lỗi tại <FaFacebookSquare /></a>\n                </div>\n            </div>\n            <ToastContainer />\n        </div>\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}