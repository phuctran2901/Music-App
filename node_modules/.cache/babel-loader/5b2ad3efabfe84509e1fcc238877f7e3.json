{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\music-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport UploadFiles from './components/UploadFiles';\nimport AudioItems from './components/AudioItems';\nimport TimeSlider from 'react-input-slider';\nimport { database } from './configFirebase';\nimport { AiOutlinePauseCircle, AiOutlinePlayCircle, AiOutlineCloseCircle } from 'react-icons/ai';\nimport { BiSkipNextCircle, BiSkipPreviousCircle } from 'react-icons/bi';\nimport { CgMenuGridR } from 'react-icons/cg';\nimport { IconContext } from 'react-icons/lib';\nimport { toastify, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nconst databaseRef = database.ref('Audios');\n\nconst findIndex = (id, array) => {\n  let result = -1;\n  array.forEach((ob, index) => {\n    if (ob.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nfunction App() {\n  _s();\n\n  const audioRef = useRef();\n  const [playAndPauseAudio, setplayAndPauseAudio] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [activeID, setActiveID] = useState(0);\n  const [toggleListAudio, setToggleListAudio] = useState(true);\n  const [widthInput, setWidthInput] = useState(1366);\n  const [toggleFormUpload, setToggleFormUpload] = useState(false);\n  const [audios, setAudios] = useState([{\n    src: '',\n    image: 'https://e1.pngegg.com/pngimages/893/102/png-clipart-iconlab-itunes-itunes-sunset-red-and-yellow-musical-note.png',\n    title: 'Vui lòng chờ...',\n    artist: 'Vui lòng chờ tải dữ liệu...',\n    id: 0\n  }]);\n  useEffect(() => {\n    const widthScreen = window.screen.width;\n    setWidthInput(widthScreen);\n\n    async function fetchData() {\n      try {\n        databaseRef.once('value').then(res => {\n          const data = [];\n          const keys = Object.keys(res.val());\n          const values = Object.values(res.val());\n          keys.map((key, index) => {\n            values[index].id = key;\n            data.push(values[index]);\n            return data;\n          });\n          setAudios(data);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    ;\n    fetchData();\n  }, []);\n\n  const nextSong = () => {\n    console.log(audios.length);\n  };\n\n  const handleOnChangeSlider = ({\n    x\n  }) => {\n    audioRef.current.currentTime = x;\n    setCurrentTime(x);\n\n    if (!playAndPauseAudio) {\n      setplayAndPauseAudio(true);\n      audioRef.current.play();\n    }\n  };\n\n  const onClickAudio = () => {\n    if (!playAndPauseAudio) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n\n    setplayAndPauseAudio(!playAndPauseAudio);\n  };\n\n  const handleOnLoadedData = () => {\n    setDuration(audioRef.current.duration);\n\n    if (playAndPauseAudio) {\n      audioRef.current.play();\n    }\n  };\n\n  const renderTime = () => {\n    let html = null;\n    let cMinute = Math.floor(currentTime / 60);\n    let cSecond = Math.floor(currentTime % 60);\n    let dMinute = Math.floor(duration / 60);\n    let dSecond = Math.floor(duration % 60);\n    let cTime = `${cMinute} : ${cSecond < 10 ? `0${cSecond}` : `${cSecond}`}`;\n    let dTime = `${dMinute} : ${dSecond < 10 ? `0${dSecond}` : `${dSecond}`}`;\n    html = `${cTime} / ${dTime}`;\n    return html;\n  };\n\n  const selectIndex = id => {\n    let index = findIndex(id, audios);\n\n    if (index != -1) {\n      setIndex(index);\n      setActiveID(index);\n    }\n  };\n\n  const onToggleListAudio = () => {\n    setToggleListAudio(!toggleListAudio);\n  };\n\n  const onToggleFormUpload = bool => {\n    setToggleFormUpload(bool);\n  };\n\n  const handleUploadSong = song => {\n    const newAudios = [...audios];\n    newAudios.push(song);\n    setAudios(newAudios);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-w\",\n    children: [/*#__PURE__*/_jsxDEV(UploadFiles, {\n      toggleFormUpload: toggleFormUpload,\n      handleToggleFormUpload: onToggleFormUpload,\n      handleUploadSong: handleUploadSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!toggleListAudio ? /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: onToggleListAudio,\n        children: /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n          value: {\n            size: 40,\n            color: 'white',\n            className: 'icon-open active'\n          },\n          children: /*#__PURE__*/_jsxDEV(CgMenuGridR, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper-audio\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: `audio-img ${playAndPauseAudio ? 'active' : ''}`,\n          src: audios[index].image,\n          alt: audios[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"audio-name\",\n          children: audios[index].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"audio-artist\",\n          children: audios[index].artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          src: audios[index].src,\n          onLoadedData: handleOnLoadedData,\n          onTimeUpdate: () => {\n            setCurrentTime(audioRef.current.currentTime);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"audio-time\",\n          children: renderTime()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"audio-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"audio-button\",\n            children: /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n              value: {\n                size: 40\n              },\n              children: /*#__PURE__*/_jsxDEV(BiSkipPreviousCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"audio-button\",\n            onClick: onClickAudio,\n            children: /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n              value: {\n                size: 40\n              },\n              children: playAndPauseAudio ? /*#__PURE__*/_jsxDEV(AiOutlinePauseCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 54\n              }, this) : /*#__PURE__*/_jsxDEV(AiOutlinePlayCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 81\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"audio-button\",\n            onClick: nextSong,\n            children: /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n              value: {\n                size: 40\n              },\n              children: /*#__PURE__*/_jsxDEV(BiSkipNextCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TimeSlider, {\n          axis: \"x\",\n          xmin: 0,\n          x: currentTime,\n          xmax: duration,\n          onChange: handleOnChangeSlider,\n          styles: {\n            track: {\n              backgroundColor: \"#e3e3e3\",\n              height: \"8px\",\n              width: `${widthInput - widthInput * 50 / 100}px`\n            },\n            active: {\n              backgroundColor: \"black\",\n              height: \"8px\"\n            },\n            thumb: {\n              width: \"20px\",\n              height: \"20px\",\n              backgroundColor: \"#e183e3\",\n              borderRadius: '50px'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `wrapper-song ${toggleListAudio ? 'active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: onToggleListAudio,\n          children: /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n            value: {\n              size: 40,\n              color: \"white\",\n              className: \"icon-close\"\n            },\n            children: /*#__PURE__*/_jsxDEV(AiOutlineCloseCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title-song\",\n          children: \"List Audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AudioItems, {\n          active: activeID,\n          data: audios,\n          handleSaveIndex: selectIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onToggleFormUpload(true),\n          className: \"btn-upload\",\n          children: \"Upload Song\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"zu55YxccKJNQivWPzAnVSseA6jA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/music-app/src/App.js"],"names":["useEffect","useRef","useState","UploadFiles","AudioItems","TimeSlider","database","AiOutlinePauseCircle","AiOutlinePlayCircle","AiOutlineCloseCircle","BiSkipNextCircle","BiSkipPreviousCircle","CgMenuGridR","IconContext","toastify","ToastContainer","databaseRef","ref","findIndex","id","array","result","forEach","ob","index","App","audioRef","playAndPauseAudio","setplayAndPauseAudio","currentTime","setCurrentTime","duration","setDuration","setIndex","activeID","setActiveID","toggleListAudio","setToggleListAudio","widthInput","setWidthInput","toggleFormUpload","setToggleFormUpload","audios","setAudios","src","image","title","artist","widthScreen","window","screen","width","fetchData","once","then","res","data","keys","Object","val","values","map","key","push","err","console","log","nextSong","length","handleOnChangeSlider","x","current","play","onClickAudio","pause","handleOnLoadedData","renderTime","html","cMinute","Math","floor","cSecond","dMinute","dSecond","cTime","dTime","selectIndex","onToggleListAudio","onToggleFormUpload","bool","handleUploadSong","song","newAudios","size","color","className","name","track","backgroundColor","height","active","thumb","borderRadius"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport UploadFiles from './components/UploadFiles';\nimport AudioItems from './components/AudioItems';\nimport TimeSlider from 'react-input-slider';\nimport { database } from './configFirebase';\nimport {\n    AiOutlinePauseCircle,\n    AiOutlinePlayCircle,\n    AiOutlineCloseCircle\n} from 'react-icons/ai';\nimport {\n    BiSkipNextCircle,\n    BiSkipPreviousCircle\n} from 'react-icons/bi';\nimport { CgMenuGridR } from 'react-icons/cg';\nimport { IconContext } from 'react-icons/lib';\nimport { toastify, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nconst databaseRef = database.ref('Audios');\n\nconst findIndex = (id, array) => {\n    let result = -1;\n    array.forEach((ob, index) => {\n        if (ob.id === id) {\n            result = index;\n        }\n    });\n    return result;\n}\n\nfunction App() {\n    const audioRef = useRef();\n    const [playAndPauseAudio, setplayAndPauseAudio] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [duration, setDuration] = useState(0);\n    const [index, setIndex] = useState(0);\n    const [activeID, setActiveID] = useState(0);\n    const [toggleListAudio, setToggleListAudio] = useState(true);\n    const [widthInput, setWidthInput] = useState(1366);\n    const [toggleFormUpload, setToggleFormUpload] = useState(false);\n    const [audios, setAudios] = useState([\n        {\n            src: '',\n            image: 'https://e1.pngegg.com/pngimages/893/102/png-clipart-iconlab-itunes-itunes-sunset-red-and-yellow-musical-note.png',\n            title: 'Vui lòng chờ...',\n            artist: 'Vui lòng chờ tải dữ liệu...',\n            id: 0\n        }\n    ])\n    useEffect(() => {\n        const widthScreen = window.screen.width;\n        setWidthInput(widthScreen);\n        async function fetchData() {\n            try {\n                databaseRef.once('value').then(res => {\n                    const data = [];\n                    const keys = Object.keys(res.val());\n                    const values = Object.values(res.val());\n                    keys.map((key, index) => {\n                        values[index].id = key;\n                        data.push(values[index]);\n                        return data;\n                    })\n                    setAudios(data);\n                })\n            }\n            catch (err) {\n                console.log(err);\n            }\n        };\n        fetchData();\n    }, [])\n    const nextSong = () => {\n        console.log(audios.length)\n    }\n    const handleOnChangeSlider = ({ x }) => {\n        audioRef.current.currentTime = x;\n        setCurrentTime(x);\n        if (!playAndPauseAudio) {\n            setplayAndPauseAudio(true);\n            audioRef.current.play();\n        }\n    }\n    const onClickAudio = () => {\n        if (!playAndPauseAudio) {\n            audioRef.current.play();\n        }\n        else {\n            audioRef.current.pause();\n        }\n        setplayAndPauseAudio(!playAndPauseAudio);\n    }\n    const handleOnLoadedData = () => {\n        setDuration(audioRef.current.duration);\n        if (playAndPauseAudio) {\n            audioRef.current.play();\n        }\n    }\n    const renderTime = () => {\n        let html = null;\n        let cMinute = Math.floor(currentTime / 60);\n        let cSecond = Math.floor(currentTime % 60);\n        let dMinute = Math.floor(duration / 60);\n        let dSecond = Math.floor(duration % 60);\n        let cTime = `${cMinute} : ${cSecond < 10 ? `0${cSecond}` : `${cSecond}`}`;\n        let dTime = `${dMinute} : ${dSecond < 10 ? `0${dSecond}` : `${dSecond}`}`;\n        html = `${cTime} / ${dTime}`;\n        return html;\n    }\n    const selectIndex = (id) => {\n        let index = findIndex(id, audios);\n        if (index != -1) {\n            setIndex(index);\n            setActiveID(index);\n        }\n    }\n    const onToggleListAudio = () => {\n        setToggleListAudio(!toggleListAudio);\n    }\n    const onToggleFormUpload = (bool) => {\n        setToggleFormUpload(bool);\n    }\n    const handleUploadSong = (song) => {\n        const newAudios = [...audios];\n        newAudios.push(song);\n        setAudios(newAudios);\n    }\n    return (\n        <div className=\"container-w\">\n            <UploadFiles\n                toggleFormUpload={toggleFormUpload}\n                handleToggleFormUpload={onToggleFormUpload}\n                handleUploadSong={handleUploadSong}\n            />\n            <div>\n                {!toggleListAudio ? <div onClick={onToggleListAudio}>\n                    <IconContext.Provider value={{ size: 40, color: 'white', className: 'icon-open active' }}>\n                        <CgMenuGridR />\n                    </IconContext.Provider>\n                </div> : ''}\n                <div className=\"wrapper-audio\">\n                    <img className={`audio-img ${playAndPauseAudio ? 'active' : ''}`} src={audios[index].image} alt={audios[0].name} />\n                    <p className=\"audio-name\">{audios[index].name}</p>\n                    <p className=\"audio-artist\">{audios[index].artist}</p>\n                    <audio\n                        ref={audioRef}\n                        src={audios[index].src}\n                        onLoadedData={handleOnLoadedData}\n                        onTimeUpdate={() => {\n                            setCurrentTime(audioRef.current.currentTime)\n                        }}\n                    ></audio>\n                    <p className=\"audio-time\">\n                        {renderTime()}\n                    </p>\n                    <div className=\"audio-controls\">\n                        <button className=\"audio-button\" >\n                            <IconContext.Provider value={{ size: 40 }}>\n                                <BiSkipPreviousCircle />\n                            </IconContext.Provider>\n                        </button>\n                        <button className=\"audio-button\" onClick={onClickAudio}>\n                            <IconContext.Provider value={{ size: 40 }}>\n                                {playAndPauseAudio ? <AiOutlinePauseCircle /> : <AiOutlinePlayCircle />}\n                            </IconContext.Provider>\n                        </button>\n                        <button className=\"audio-button\" onClick={nextSong}>\n                            <IconContext.Provider value={{ size: 40 }}>\n                                <BiSkipNextCircle />\n                            </IconContext.Provider>\n                        </button>\n                    </div>\n                    <TimeSlider\n                        axis=\"x\"\n                        xmin={0}\n                        x={currentTime}\n                        xmax={duration}\n                        onChange={handleOnChangeSlider}\n                        styles={{\n                            track: {\n                                backgroundColor: \"#e3e3e3\",\n                                height: \"8px\",\n                                width: `${widthInput - widthInput * 50 / 100}px`\n                            },\n                            active: {\n                                backgroundColor: \"black\",\n                                height: \"8px\",\n                            },\n                            thumb: {\n                                width: \"20px\",\n                                height: \"20px\",\n                                backgroundColor: \"#e183e3\",\n                                borderRadius: '50px',\n                            },\n                        }}\n                    />\n                </div>\n                <div className={`wrapper-song ${toggleListAudio ? 'active' : ''}`}>\n                    <div onClick={onToggleListAudio}>\n                        <IconContext.Provider value={{ size: 40, color: \"white\", className: \"icon-close\" }}>\n                            <AiOutlineCloseCircle />\n                        </IconContext.Provider>\n                    </div>\n                    <p className=\"title-song\">List Audio</p>\n                    <AudioItems\n                        active={activeID}\n                        data={audios}\n                        handleSaveIndex={selectIndex}\n                    />\n                    <button\n                        onClick={() => onToggleFormUpload(true)}\n                        className=\"btn-upload\">Upload Song</button>\n                </div>\n            </div>\n            <ToastContainer />\n        </div>\n\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}